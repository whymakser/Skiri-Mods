#     _    _      _                       _     
# ___| | _(_)_ __(_)  _ __ ___   ___   __| |___ 
#/ __| |/ / | '__| | | '_ ` _ \ / _ \ / _` / __|
#\__ \   <| | |  | | | | | | | | (_) | (_| \__ \
#|___/_|\_\_|_|  |_| |_| |_| |_|\___/ \__,_|___/

# meta developer: @skirimods
# license: GNU General Public License v3.0


from hikkatl.types import Message
from hikkatl.tl.functions.account import UpdateProfileRequest
from .. import loader, utils
import time

@loader.tds
class SkiriAFK(loader.Module):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π AFK –º–æ–¥—É–ª—å —Å —Ñ–∏–∫—Å–æ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–º–µ–Ω–∏"""
    strings = {"name": "SkiriAFK"}

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "afk_message",
                "üåÄ <b>–Ø –≤ AFK!</b>\n<b>–ü—Ä–∏—á–∏–Ω–∞:</b> <i>{reason}</i>",
                "–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏",
                validator=loader.validators.String()
            ),
            loader.ConfigValue(
                "name_prefix",
                "[AFK] ",
                "–ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –∏–º–µ–Ω–∏",
                validator=loader.validators.String()
            )
        )
        self.notified_chats = set()
        self.original_first_name = ""
        self.original_last_name = ""

    async def client_ready(self, client, db):
        self._db = db
        self._client = client
        me = await client.get_me()
        self.original_first_name = me.first_name
        self.original_last_name = me.last_name or ""

    async def update_name(self, afk: bool):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–º—è —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º –∏–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª"""
        new_first = f"{self.config['name_prefix']}{self.original_first_name}" if afk else self.original_first_name
        await self._client(UpdateProfileRequest(
            first_name=new_first,
            last_name=self.original_last_name
        ))

    async def afkcmd(self, message: Message):
        """–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å AFK —Ä–µ–∂–∏–º"""
        reason = utils.get_args_raw(message) or "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
        self._db.set(__name__, "afk", True)
        self._db.set(__name__, "reason", reason)
        self._db.set(__name__, "time", time.time())
        self.notified_chats.clear()
        
        await self.update_name(True)
        await utils.answer(
            message,
            self.config["afk_message"].format(reason=reason)
        )

    async def unafkcmd(self, message: Message):
        """–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å AFK —Ä–µ–∂–∏–º"""
        if not self._db.get(__name__, "afk"):
            await utils.answer(message, "‚ùå –Ø –∏ —Ç–∞–∫ –Ω–µ –≤ AFK!")
            return
        
        duration = self.format_duration(time.time() - self._db.get(__name__, "time"))
        self._db.set(__name__, "afk", False)
        
        await self.update_name(False)  # –í–∞–∂–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–¥–µ—Å—å
        await utils.answer(
            message,
            f"‚ú® <b>–Ø –≤–µ—Ä–Ω—É–ª—Å—è!</b>\n‚è± <b>–û—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª:</b> <i>{duration}</i>"
        )

    def format_duration(self, seconds: float) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ –ß–ß:–ú–ú:–°–°"""
        hours, remainder = divmod(int(seconds), 3600)
        minutes, seconds = divmod(remainder, 60)
        return f"{hours:02d}:{minutes:02d}:{seconds:02d}"

    async def watcher(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not isinstance(message, Message) or not self._db.get(__name__, "afk"):
            return

        chat_id = utils.get_chat_id(message)
        if chat_id in self.notified_chats:
            return

        sender = getattr(message, "sender", None)
        me = await self._client.get_me()
        if not sender or sender.id == me.id:
            return

        mentioned = me.username and f"@{me.username}" in (message.text or "").lower()
        is_pm = message.is_private

        if mentioned or is_pm:
            reason = self._db.get(__name__, "reason", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
            duration = self.format_duration(time.time() - self._db.get(__name__, "time"))
            
            await message.reply(
                f"‚ö° <b>–Ø –≤ AFK!</b>\n"
                f"üìå <b>–ü—Ä–∏—á–∏–Ω–∞:</b> <i>{reason}</i>\n"
                f"‚è≥ <b>–ü—Ä–æ—à–ª–æ:</b> <i>{duration}</i>"
            )
            self.notified_chats.add(chat_id)

    async def on_unload(self):
        """–ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ"""
        if self._db.get(__name__, "afk"):
            await self.update_name(False)
