from hikkatl.types import Message
from .. import loader, utils
import asyncio
import logging
import re

logger = logging.getLogger(__name__)

@loader.tds
class SpeedTestMod(loader.Module):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞"""
    strings = {
        "name": "SpeedTest",
        "testing": "üîÑ –ó–∞–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏...",
        "result": "üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã SpeedTest:</b>\n\n{result}",
        "error": "‚ùå –û—à–∏–±–∫–∞: {error}",
        "not_installed": "‚ùå speedtest-cli –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ:\n<code>pip install speedtest-cli</code>"
    }

    async def client_ready(self, client, db):
        self._client = client
        self._db = db

    async def speedtestcmd(self, message: Message):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏"""
        try:
            await utils.answer(message, self.strings["testing"])

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å speedtest-cli
            proc = await asyncio.create_subprocess_shell(
                "speedtest --version",
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            await proc.communicate()

            if proc.returncode != 0:
                await utils.answer(message, self.strings["not_installed"])
                return

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏
            proc = await asyncio.create_subprocess_shell(
                "speedtest --simple",
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            stdout, stderr = await proc.communicate()

            if proc.returncode != 0:
                error = stderr.decode().strip() or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
                raise Exception(error)

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = stdout.decode().strip()
            formatted = re.sub(
                r"(Ping|Download|Upload):\s+(.*)",
                lambda m: f"‚Ä¢ <b>{m.group(1)}:</b> {m.group(2)}",
                result
            )

            await utils.answer(
                message,
                self.strings["result"].format(result=formatted)
            )

        except Exception as e:
            logger.exception("Speedtest failed")
            await utils.answer(
                message,
                self.strings["error"].format(error=str(e))
            )