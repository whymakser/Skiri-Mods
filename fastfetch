#--------------------------------------------------
#|      _    _      _                       _     |
#|  ___| | _(_)_ __(_)  _ __ ___   ___   __| |___ |
#| / __| |/ / | '__| | | '_ ` _ \ / _ \ / _` / __||
#| \__ \   <| | |  | | | | | | | | (_) | (_| \__ \|
#| |___/_|\_\_|_|  |_| |_| |_| |_|\___/ \__,_|___/|
#--------------------------------------------------

# meta developer: @skirimods
# license: GNU General Public License v3.0


import subprocess
import re
from .. import loader, utils
from telethon.tl.types import Message

@loader.tds
class FastFetchMod(loader.Module):
    """–ö—Ä–∞—Å–∏–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ fastfetch —Å –¥–∏–∑–∞–π–Ω–æ–º"""

    strings = {
        "name": "FastFetch",
        "fetching": "üîÑ –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ..."
    }

    async def client_ready(self, client, db):
        self._db = db
        self._client = client

    @loader.command()
    async def ffetch(self, message: Message):
        """- –ü–æ–∫–∞–∑–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Å—Ç–∏–ª—å–Ω–æ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏"""
        await utils.answer(message, self.strings["fetching"])

        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º fastfetch —Å –∫–æ–º–ø–∞–∫—Ç–Ω—ã–º —Ä–µ–∂–∏–º–æ–º –∏ —Ü–≤–µ—Ç–∞–º–∏
            result = subprocess.run(
                ["fastfetch", "--logo-color-1", "blue", "--logo-color-2", "cyan", "-L", "none"],
                capture_output=True,
                text=True,
                check=True
            ).stdout

            # –£–±–∏—Ä–∞–µ–º —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ANSI
            clean_result = re.sub(r'\x1B\[[0-9;]*[mGABCDHJKf]?', '', result)

            # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
            response = (
                "‚Üí <b>fastfetch</b>\n\n"
                "<blockquote>\n"
                f"{clean_result.strip()}"
                "</blockquote>\n\n"
            )

            await utils.answer(message, response)
        except subprocess.CalledProcessError as e:
            await utils.answer(message, f"‚ùå –û—à–∏–±–∫–∞: {e.stderr.strip()}")
        except FileNotFoundError:
            await utils.answer(message, "‚ùå fastfetch –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: <code>sudo apt install fastfetch</code>")

    @loader.command()
    async def fflarge(self, message: Message):
        """- –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"""
        await utils.answer(message, self.strings["fetching"])

        try:
            # –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ª–æ–≥–æ
            result = subprocess.run(
                ["fastfetch", "--logo-color-1", "magenta", "--logo-color-2", "cyan"],
                capture_output=True,
                text=True,
                check=True
            ).stdout

            # –£–±–∏—Ä–∞–µ–º —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ANSI
            clean_result = re.sub(r'\x1B\[[0-9;]*[mGABCDHJKf]?', '', result)

            response = (
                "‚Üí <b>fastfetch</b>\n\n"
                "<blockquote>\n"
                f"{clean_result.strip()}"
                "</blockquote>\n\n"
            )

            await utils.answer(message, response)
        except subprocess.CalledProcessError as e:
            await utils.answer(message, f"‚ùå –û—à–∏–±–∫–∞: {e.stderr.strip()}")
        except FileNotFoundError:
            await utils.answer(message, "‚ùå fastfetch –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: <code>sudo apt install fastfetch</code>")
        except Exception as e:
            await utils.answer(message, f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            
