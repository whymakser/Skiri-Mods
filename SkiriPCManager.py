#     _    _      _                       _     
# ___| | _(_)_ __(_)  _ __ ___   ___   __| |___ 
#/ __| |/ / | '__| | | '_ ` _ \ / _ \ / _` / __|
#\__ \   <| | |  | | | | | | | | (_) | (_| \__ \
#|___/_|\_\_|_|  |_| |_| |_| |_|\___/ \__,_|___/

# meta developer: @skirimods
# license: GNU General Public License v3.0


from hikkatl.types import Message
from .. import loader, utils
import subprocess
import os
import platform
import logging
from typing import Optional

logger = logging.getLogger(__name__)

@loader.tds
class SkiriPCManagerMod(loader.Module):
    """–£–¥–∞–ª–µ–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ü–ö —á–µ—Ä–µ–∑ Telegram"""
    strings = {
        "name": "SkiriPCManager",
        "help": "üñ•Ô∏è <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
                "‚Ä¢ <code>.shutdown</code> - –í—ã–∫–ª—é—á–∏—Ç—å –ü–ö\n"
                "‚Ä¢ <code>.pcrestart</code> - –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ü–ö\n"
                "‚Ä¢ <code>.lock</code> - –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ü–ö\n"
                "‚Ä¢ <code>.screenshot</code> - –°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç\n"
                "‚Ä¢ <code>.cmd [command]</code> - –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É\n"
                "‚Ä¢ <code>.files [path]</code> - –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤\n"
                "‚Ä¢ <code>.send [path]</code> - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª\n"
                "‚Ä¢ <code>.pchelp</code> - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        "shutdown": "üñ•Ô∏è –ö–æ–º–ø—å—é—Ç–µ—Ä –≤—ã–∫–ª—é—á–∏—Ç—Å—è —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥",
        "restart": "üîÑ –ö–æ–º–ø—å—é—Ç–µ—Ä –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—Å—è —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥",
        "lock": "üîí –ö–æ–º–ø—å—é—Ç–µ—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω",
        "screenshot": "üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω",
        "cmd_result": "üìù <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–º–∞–Ω–¥—ã:</b>\n<code>{}</code>",
        "files_list": "üìÇ <b>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ {}:</b>\n\n<code>{}</code>",
        "file_sent": "üìÅ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω",
        "file_not_found": "‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω",
        "error": "‚ùå –û—à–∏–±–∫–∞: {}"
    }

    def __init__(self):
        self.os_type = platform.system()
        self.screenshot_path = "telegram_screenshot.png"

    async def client_ready(self, client, db):
        self._client = client
        self._db = db

    async def pchelpcmd(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"""
        await utils.answer(message, self.strings["help"])

    async def shutdowncmd(self, message: Message):
        """–í—ã–∫–ª—é—á–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä"""
        try:
            if self.os_type == "Windows":
                os.system("shutdown /s /t 30")
            else:
                os.system("shutdown -h now")
            await utils.answer(message, self.strings["shutdown"])
        except Exception as e:
            await utils.answer(message, self.strings["error"].format(str(e)))

    async def pcrestartcmd(self, message: Message):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä"""
        try:
            if self.os_type == "Windows":
                os.system("shutdown /r /t 30")
            else:
                os.system("reboot")
            await utils.answer(message, self.strings["restart"])
        except Exception as e:
            await utils.answer(message, self.strings["error"].format(str(e)))

    async def lockcmd(self, message: Message):
        """–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä"""
        try:
            if self.os_type == "Windows":
                os.system("rundll32.exe user32.dll,LockWorkStation")
            elif self.os_type == "Linux":
                os.system("gnome-screensaver-command -l")
            elif self.os_type == "Darwin":
                os.system("/System/Library/CoreServices/Menu\\ Extras/User.menu/Contents/Resources/CGSession -suspend")
            await utils.answer(message, self.strings["lock"])
        except Exception as e:
            await utils.answer(message, self.strings["error"].format(str(e)))

    async def screenshotcmd(self, message: Message):
        """–°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞"""
        try:
            if self.os_type == "Windows":
                import pyautogui
                pyautogui.screenshot(self.screenshot_path)
            else:
                from mss import mss
                with mss() as sct:
                    sct.shot(output=self.screenshot_path)
            
            await self._client.send_file(
                message.peer_id,
                self.screenshot_path,
                caption="üñ•Ô∏è –°–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞"
            )
            os.remove(self.screenshot_path)
            await utils.answer(message, self.strings["screenshot"])
        except Exception as e:
            await utils.answer(message, self.strings["error"].format(str(e)))
            logger.exception("Screenshot failed")

    async def cmdcmd(self, message: Message):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ"""
        command = utils.get_args_raw(message)
        if not command:
            await utils.answer(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
            return

        try:
            result = subprocess.check_output(
                command,
                shell=True,
                stderr=subprocess.STDOUT,
                universal_newlines=True,
                timeout=60
            )
            await utils.answer(
                message,
                self.strings["cmd_result"].format(result[:4000])
            )
        except subprocess.CalledProcessError as e:
            await utils.answer(
                message,
                self.strings["error"].format(e.output[:4000])
            )
        except Exception as e:
            await utils.answer(message, self.strings["error"].format(str(e)))

    async def filescmd(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤"""
        path = utils.get_args_raw(message) or "."
        try:
            files = "\n".join(os.listdir(path))
            await utils.answer(
                message,
                self.strings["files_list"].format(path, files[:4000])
            )
        except Exception as e:
            await utils.answer(message, self.strings["error"].format(str(e)))

    async def sendcmd(self, message: Message):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª"""
        file_path = utils.get_args_raw(message)
        if not file_path:
            await utils.answer(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É")
            return

        try:
            if os.path.exists(file_path):
                await self._client.send_file(
                    message.peer_id,
                    file_path,
                    caption=f"üìÅ –§–∞–π–ª: {os.path.basename(file_path)}"
                )
                await utils.answer(message, self.strings["file_sent"])
            else:
                await utils.answer(message, self.strings["file_not_found"])
        except Exception as e:
            await utils.answer(message, self.strings["error"].format(str(e)))
